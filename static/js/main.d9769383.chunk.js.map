{"version":3,"sources":["redux/dialogs-reducer.ts","components/Users/users.module.css","assets/images/avatar.jpg","assets/images/Spinner.svg","components/Navbar/Navbar.module.css","components/common/FormsControls/FormsControls.js","serviceWorker.js","components/Navbar/Navbar.jsx","utils/object-helpers.js","redux/users-reducer.ts","components/common/Paginator/Paginator.tsx","components/Users/User.jsx","components/Users/Users.tsx","redux/users-selectors.ts","components/Users/UsersContainer.tsx","components/Header/Header.jsx","redux/auth-reducer.ts","components/Header/HeaderContainer.jsx","components/Login/Login.jsx","redux/app-reducer.ts","redux/sidebar-reducer.ts","redux/redux-store.ts","hoc/withSuspense.js","App.js","index.js","components/common/Preloader/Preloader.js","components/common/Paginator/Paginator.module.css","utils/validators/validators.js","components/common/FormsControls/FormsControls.module.css","api/api.ts","components/Header/Header.module.css","redux/profile-reducer.ts"],"names":["initialState","dialogs","id","name","messages","message","sendMessageCreator","newMessageBody","type","dialogsReducer","state","action","body","module","exports","FormControl","input","meta","touched","error","children","hasError","className","styles","formControl","Textarea","props","restProps","child","Input","createField","placeholder","validators","component","text","validate","Boolean","window","location","hostname","match","Navbar","s","nav","item","to","activeClassName","activeLink","updateObjectInArray","items","itemId","objPropName","newObjProps","map","u","users","pageSize","totalUsersCount","currentPage","isFetching","followingInProgress","followSuccess","userId","unfollowSuccess","toggleFollowingProgress","_followUnfollowFlow","dispatch","apiMethod","actionCreator","a","data","resultCode","usersReducer","followed","count","filter","Paginator","totalItemsCount","onPageChanged","portionSize","pagesCount","Math","ceil","pages","i","push","portionCount","useState","portionNumber","setPortionNumber","leftPortionPageNumber","rightPortionPageNumber","cn","paginator","btn","onClick","p","selectedPage","pageNumber","key","e","User","user","unfollow","follow","src","photos","small","userPhoto","disabled","some","status","Users","getUsers","createSelector","usersPage","getPageSize","getTotalUsersCount","getCurrentPage","getIsFetching","getFollowingInProgress","UsersContainer","this","pageTitle","Preloader","React","Component","compose","connect","usersAPI","bind","page","getState","totalCount","Header","header","loginBlock","isAuth","login","logout","SET_USER_DATA","email","captchaUrl","setAuthUserData","payload","getCaptchaUrlSuccess","getAuthUserData","authAPI","me","meData","ResultCodeEnum","Success","getCaptchaUrl","securityAPI","response","url","authReducer","HeaderContainer","auth","LoginReduxForm","reduxForm","form","handleSubmit","onSubmit","required","style","formSummaryError","password","rememberMe","captcha","ResultCodeForCapctha","CaptchaIsRequired","length","stopSubmit","_error","formData","initialized","appReducer","sidebarReducer","rootReducer","combineReducers","profilePage","profileReducer","dialogsPage","sidebar","formReducer","app","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","store","createStore","applyMiddleware","thunkMiddleware","__store__","withSuspense","Suspense","fallback","DialogsContainer","lazy","ProfileContainer","App","catchAllUnhandledErrors","reason","promise","alert","initializeApp","addEventListener","removeEventListener","exact","path","render","AppContainer","withRouter","Promise","all","then","SocialJSApp","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister","backgroundColor","preloader","value","maxLengthCreator","maxLength","instance","axios","create","withCredentials","baseURL","headers","get","post","delete","getProfile","console","warn","profileAPI","getStatus","updateStatus","put","savePhoto","photoFile","FormData","append","saveProfile","profile","res","posts","likesCount","newPostText","addPostActionCreator","setStatus","getUserProfile","file","reject","newPost","postId"],"mappings":"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","file":"static/js/main.d9769383.chunk.js","sourcesContent":["import {isNumber} from \"util\";\r\n\r\nconst SEND_MESSAGE = 'SEND_MESSAGE';\r\n\r\ntype DialogType = {\r\n    id: number\r\n    name: string\r\n}\r\n\r\ntype MessageType = {\r\n    id: number\r\n    message: string\r\n}\r\n\r\nlet initialState = {\r\n    dialogs: [\r\n        {id: 1, name: 'Dimych'},\r\n        {id: 2, name: 'Andrew'},\r\n        {id: 3, name: 'Sveta'},\r\n        {id: 4, name: 'Sasha'},\r\n        {id: 5, name: 'Viktor'},\r\n        {id: 6, name: 'Valera'}\r\n    ] as Array<DialogType>,\r\n    messages: [\r\n        {id: 1, message: 'Hi'},\r\n        {id: 2, message: 'How is your it?'},\r\n        {id: 3, message: 'Yo'},\r\n        {id: 4, message: 'Yo'},\r\n        {id: 5, message: 'Yo'}\r\n    ] as Array<MessageType>\r\n};\r\n\r\nexport type InitialStateType = typeof initialState\r\n\r\nconst dialogsReducer = (state = initialState, action: any): InitialStateType => {\r\n    switch (action.type) {\r\n        case SEND_MESSAGE:\r\n            let body = action.newMessageBody;\r\n            return {\r\n                ...state,\r\n                messages: [...state.messages, {id: 6, message: body}]\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\ntype SendMessageCreatorActionType = {\r\n    type: typeof SEND_MESSAGE\r\n    newMessageBody: string\r\n}\r\nexport const sendMessageCreator = (newMessageBody: string): SendMessageCreatorActionType => ({type: SEND_MESSAGE, newMessageBody});\r\n\r\nexport default dialogsReducer;","// extracted by mini-css-extract-plugin\nmodule.exports = {\"userPhoto\":\"users_userPhoto__3RbLp\",\"selectedPage\":\"users_selectedPage__2FPz2\"};","module.exports = __webpack_public_path__ + \"static/media/avatar.2911e64c.jpg\";","module.exports = __webpack_public_path__ + \"static/media/Spinner.1dd4b4ec.svg\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"nav\":\"Navbar_nav__3UWtW\",\"item\":\"Navbar_item__JjhGa\",\"activeLink\":\"Navbar_activeLink__13O4h\"};","import React from \"react\";\r\nimport styles from \"./FormsControls.module.css\";\r\nimport {required} from \"../../../utils/validators/validators\";\r\nimport {Field} from \"redux-form\";\r\n\r\nconst FormControl = ({input, meta: {touched, error}, children}) => {\r\n    const hasError = touched && error;\r\n    return (\r\n        <div className={styles.formControl + \" \" + (hasError ? styles.error : \"\")}>\r\n            <div>\r\n                {children}\r\n            </div>\r\n            {hasError && <span>{error}</span>}\r\n        </div>\r\n    )\r\n};\r\n\r\nexport const Textarea = (props) => {\r\n    const {input, meta, child, ...restProps} = props;\r\n    return <FormControl {...props}><textarea {...input} {...restProps} /></FormControl>\r\n};\r\n\r\nexport const Input = (props) => {\r\n    const {input, meta, child, ...restProps} = props;\r\n    return <FormControl {...props}><input {...input} {...restProps} /></FormControl>\r\n};\r\n\r\nexport const createField = (placeholder, name, validators, component, props = {}, text = \"\") => (\r\n    <div>\r\n        <Field placeholder={placeholder} name={name}\r\n               validate={validators}\r\n               component={component}\r\n               {...props}\r\n        /> {text}\r\n    </div>\r\n);","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport s from './Navbar.module.css'\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\nconst Navbar = () => {\r\n    return <nav className={s.nav}>\r\n        <div className={s.item}>\r\n            <NavLink to='/profile' activeClassName={s.activeLink}>Profile</NavLink>\r\n        </div>\r\n        <div className={s.item}>\r\n            <NavLink to='/dialogs' activeClassName={s.activeLink}>Messages</NavLink>\r\n        </div>\r\n        <div className={s.item}>\r\n            <NavLink to='/users' activeClassName={s.activeLink}>Users</NavLink>\r\n        </div>\r\n        <div className={s.item}>\r\n            <a>news</a>\r\n        </div>\r\n        <div className={s.item}>\r\n            <a>Music</a>\r\n        </div>\r\n        <div className={s.item}>\r\n            <a>Settings</a>\r\n        </div>\r\n    </nav>\r\n\r\n}\r\n\r\nexport default Navbar;","export const updateObjectInArray = (items, itemId, objPropName, newObjProps) => {\r\n\r\n    return items.map(u => {\r\n        if (u[objPropName] === itemId) {\r\n            return {...u, newObjProps}\r\n        }\r\n        return u;\r\n    })\r\n};","import {usersAPI} from \"../api/api\";\r\nimport {updateObjectInArray} from \"../utils/object-helpers\";\r\nimport {PhotosType, UserType} from '../types/types';\r\nimport {AppStateType} from \"./redux-store\";\r\nimport {Dispatch} from \"redux\";\r\nimport {ThunkAction} from \"redux-thunk\";\r\n\r\nconst FOLLOW = 'FOLLOW';\r\nconst UNFOLLOW = 'UNFOLLOW';\r\nconst SET_USERS = 'SET_USERS';\r\nconst SET_CURRENT_PAGE = 'SET_CURRENT_PAGE';\r\nconst SET_TOTAL_USERS_COUNT = 'SET_TOTAL_USERS_COUNT';\r\nconst TOGGLE_IS_FETCHING = 'TOGGLE_IS_FETCHING';\r\nconst TOGGLE_IS_FOLLOWING_PROGRESS = 'TOGGLE_IS_FOLLOWING_PROGRESS';\r\n\r\nlet initialState = {\r\n    users: [] as Array<UserType>,\r\n    pageSize: 10,\r\n    totalUsersCount: 0,\r\n    currentPage: 1,\r\n    isFetching: true,\r\n    followingInProgress: [] as Array<number>,\r\n};\r\n\r\ntype InitialState = typeof initialState;\r\n\r\nconst usersReducer = (state = initialState, action: ActionTypes): InitialState => {\r\n    switch (action.type) {\r\n        case FOLLOW:\r\n            return {\r\n                ...state,\r\n                users: updateObjectInArray(state.users, action.userId, \"id\", {followed: true})\r\n            }\r\n        case UNFOLLOW:\r\n            return {\r\n                ...state,\r\n                users: updateObjectInArray(state.users, action.userId, \"id\", {followed: false})\r\n            }\r\n        case SET_USERS: {\r\n            return {...state, users: action.users}\r\n        }\r\n        case SET_CURRENT_PAGE: {\r\n            return {...state, currentPage: action.currentPage}\r\n        }\r\n        case SET_TOTAL_USERS_COUNT: {\r\n            return {...state, totalUsersCount: action.count}\r\n        }\r\n        case TOGGLE_IS_FETCHING: {\r\n            return {...state, isFetching: action.isFetching}\r\n        }\r\n        case TOGGLE_IS_FOLLOWING_PROGRESS: {\r\n            return {\r\n                ...state,\r\n                followingInProgress: action.isFetching\r\n                    ? [...state.followingInProgress, action.userId]\r\n                    : state.followingInProgress.filter(id => id != action.userId)\r\n            }\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\ntype ActionTypes = FollowSuccessActionType | UnfollowSuccessActionType | SetUsersActionType |\r\n    SetCurrentPageActionType | SetTotalUsersCountActionType | ToggleIsFetchingActionType |\r\n    ToggleFollowingProgressActionType\r\n\r\ntype FollowSuccessActionType = {\r\n    type: typeof FOLLOW\r\n    userId: number\r\n}\r\nexport const followSuccess = (userId: number): FollowSuccessActionType => ({type: FOLLOW, userId})\r\ntype UnfollowSuccessActionType = {\r\n    type: typeof UNFOLLOW\r\n    userId: number\r\n}\r\nexport const unfollowSuccess = (userId: number): UnfollowSuccessActionType => ({type: UNFOLLOW, userId})\r\ntype SetUsersActionType = {\r\n    type: typeof SET_USERS\r\n    users: Array<UserType>\r\n}\r\nexport const setUsers = (users: Array<UserType>): SetUsersActionType => ({type: SET_USERS, users})\r\ntype SetCurrentPageActionType = {\r\n    type: typeof SET_CURRENT_PAGE\r\n    currentPage: number\r\n}\r\nexport const setCurrentPage = (currentPage: number): SetCurrentPageActionType => ({type: SET_CURRENT_PAGE, currentPage})\r\ntype SetTotalUsersCountActionType = {\r\n    type: typeof SET_TOTAL_USERS_COUNT\r\n    count: number\r\n}\r\nexport const setTotalUsersCount = (totalUsersCount: number): SetTotalUsersCountActionType => ({\r\n    type: SET_TOTAL_USERS_COUNT,\r\n    count: totalUsersCount\r\n})\r\ntype ToggleIsFetchingActionType = {\r\n    type: typeof TOGGLE_IS_FETCHING\r\n    isFetching: boolean\r\n}\r\nexport const toggleIsFetching = (isFetching: boolean): ToggleIsFetchingActionType => ({\r\n    type: TOGGLE_IS_FETCHING,\r\n    isFetching\r\n})\r\ntype ToggleFollowingProgressActionType = {\r\n    type: typeof TOGGLE_IS_FOLLOWING_PROGRESS\r\n    isFetching: boolean\r\n    userId: number\r\n}\r\nexport const toggleFollowingProgress = (isFetching: boolean, userId: number): ToggleFollowingProgressActionType => ({\r\n    type: TOGGLE_IS_FOLLOWING_PROGRESS,\r\n    isFetching,\r\n    userId\r\n})\r\n\r\ntype GetStateType = () => AppStateType;\r\ntype DispatchType = Dispatch<ActionTypes>\r\ntype ThunkType = ThunkAction<Promise<void>, AppStateType, unknown, ActionTypes>\r\n\r\nexport const requestUsers = (page: number,\r\n                             pageSize: number): ThunkType => {\r\n    return async (dispatch, getState) => {\r\n        dispatch(setCurrentPage(page));\r\n\r\n        let data = await usersAPI.getUsers(page, pageSize);\r\n        dispatch(toggleIsFetching(false));\r\n        dispatch(setUsers(data.items));\r\n        dispatch(setTotalUsersCount(data.totalCount));\r\n    }\r\n}\r\n\r\nconst _followUnfollowFlow = async (dispatch: DispatchType,\r\n                                   userId: number,\r\n                                   apiMethod: any, actionCreator: (userId: number) => FollowSuccessActionType | UnfollowSuccessActionType) => {\r\n    dispatch(toggleFollowingProgress(true, userId));\r\n    let response = await apiMethod(userId);\r\n\r\n    if (response.data.resultCode == 0) {\r\n        dispatch(actionCreator(userId));\r\n    }\r\n    dispatch(toggleFollowingProgress(false, userId));\r\n}\r\n\r\nexport const follow = (userId: number): ThunkType => {\r\n    return async (dispatch) => {\r\n        _followUnfollowFlow(dispatch, userId, usersAPI.follow.bind(usersAPI), followSuccess);\r\n    }\r\n}\r\n\r\nexport const unfollow = (userId: number): ThunkType => {\r\n    return async (dispatch) => {\r\n        _followUnfollowFlow(dispatch, userId, usersAPI.unfollow.bind(usersAPI), unfollowSuccess);\r\n    }\r\n}\r\n\r\nexport default usersReducer;","import React, {FC, useState} from 'react';\r\nimport styles from './Paginator.module.css';\r\nimport cn from \"classnames\";\r\n\r\ntype PropsType = {\r\n    totalItemsCount: number\r\n    pageSize: number\r\n    currentPage: number\r\n    onPageChanged: (pageNumber: number) => void\r\n    portionSize?: number\r\n}\r\n\r\n\r\nlet Paginator: React.FC<PropsType> = ({totalItemsCount,\r\n                                      pageSize,\r\n                                      currentPage,\r\n                                      onPageChanged,\r\n                                      portionSize = 10}) => {\r\n\r\n    let pagesCount = Math.ceil(totalItemsCount / pageSize);\r\n\r\n    let pages: Array<number> = [];\r\n    for (let i = 1; i <= pagesCount; i++) {\r\n        pages.push(i);\r\n    }\r\n\r\n    let portionCount = Math.ceil(pagesCount / portionSize);\r\n    let [portionNumber, setPortionNumber] = useState(1);\r\n    let leftPortionPageNumber = (portionNumber - 1) * portionSize + 1;\r\n    let rightPortionPageNumber = portionNumber * portionSize;\r\n\r\n\r\n    return <div className={cn(styles.paginator, styles.btn)}>\r\n        {portionNumber > 1 &&\r\n        <button onClick={() => {\r\n            setPortionNumber(portionNumber - 1)\r\n        }}>PREV</button>}\r\n\r\n        {pages\r\n            .filter(p => p >= leftPortionPageNumber && p <= rightPortionPageNumber)\r\n            .map((p) => {\r\n                return <span className={cn({\r\n                    [styles.selectedPage]: currentPage === p\r\n                }, styles.pageNumber)}\r\n                             key={p}\r\n                             onClick={(e) => {\r\n                                 onPageChanged(p);\r\n                             }}>{p}</span>\r\n            })}\r\n        {portionCount > portionNumber &&\r\n        <button className={styles.btn} onClick={() => {\r\n            setPortionNumber(portionNumber + 1)\r\n        }}>NEXT</button>}\r\n    </div>\r\n};\r\n\r\nexport default Paginator;","import React from 'react';\r\nimport styles from \"./users.module.css\";\r\nimport userPhoto from '../../assets/images/avatar.jpg';\r\nimport {NavLink} from 'react-router-dom';\r\n\r\nlet User = ({user, followingInProgress, unfollow, follow}) => {\r\n    return <div>\r\n                <span>\r\n                    <div>\r\n                       <NavLink to={'/profile/' + user.id}>\r\n                        <img src={user.photos.small != null ? user.photos.small : userPhoto}\r\n                             className={styles.userPhoto}/>\r\n                       </NavLink>\r\n                    </div>\r\n                    <div>\r\n                        {user.followed\r\n                            ? <button disabled={followingInProgress\r\n                                .some(id => id === user.id)}\r\n                                      onClick={() => {\r\n                                          unfollow(user.id)\r\n                                      }}>\r\n                                Unfollow</button>\r\n                            : <button disabled={followingInProgress.some(id => id === user.id)}\r\n                                      onClick={() => {\r\n                                          follow(user.id)\r\n                                      }}>\r\n                                Follow</button>}\r\n                    </div>\r\n                </span>\r\n        <span>\r\n                    <span>\r\n                        <div>{user.name}</div>\r\n                        <div>{user.status}</div>\r\n                    </span>\r\n                    <span>\r\n                        <div>{'user.location.country'}</div>\r\n                        <div>{'user.location.city'}</div>\r\n                    </span>\r\n                </span>\r\n    </div>\r\n};\r\n\r\nexport default User;","import React, {FC} from 'react';\r\nimport Paginator from \"../common/Paginator/Paginator\";\r\nimport User from \"./User\";\r\nimport {UserType} from \"../../types/types\";\r\n\r\ntype PropsType = {\r\n    totalUsersCount: number\r\n    pageSize: number\r\n    currentPage: number\r\n    onPageChanged: (pageNumber: number) => void\r\n    users: Array<UserType>\r\n    followingInProgress: Array<number>\r\n    unfollow: (userId: number) => void\r\n    follow: (userId: number) => void\r\n\r\n}\r\n\r\n\r\nlet Users: FC<PropsType> = ({currentPage, totalUsersCount, pageSize, onPageChanged, users,\r\n                                ...props}) => {\r\n    return <div>\r\n        <Paginator currentPage={currentPage} onPageChanged={onPageChanged}\r\n                   totalItemsCount={totalUsersCount} pageSize={pageSize}/>\r\n        <div>\r\n            {\r\n                users.map(u => <User user={u}\r\n                                     followingInProgress={props.followingInProgress}\r\n                                     key={u.id}\r\n                                     unfollow={props.unfollow}\r\n                                     follow={props.follow}\r\n                    />\r\n                )\r\n            }\r\n        </div>\r\n    </div>\r\n};\r\n\r\nexport default Users;","import {createSelector} from \"reselect\";\r\nimport { AppStateType } from \"./redux-store\";\r\n\r\nconst getUsersSelector = (state: AppStateType) => {\r\n    return state.usersPage.users;\r\n};\r\n\r\nexport const getUsers = createSelector(getUsersSelector,\r\n    (users) => {\r\n        return users.filter(u => true);\r\n    });\r\n\r\nexport const getPageSize = (state: AppStateType) => {\r\n    return state.usersPage.pageSize;\r\n};\r\n\r\nexport const getTotalUsersCount = (state: AppStateType) => {\r\n    return state.usersPage.totalUsersCount;\r\n};\r\n\r\nexport const getCurrentPage = (state: AppStateType) => {\r\n    return state.usersPage.currentPage;\r\n};\r\n\r\nexport const getIsFetching = (state: AppStateType) => {\r\n    return state.usersPage.isFetching;\r\n};\r\nexport const getFollowingInProgress = (state: AppStateType) => {\r\n    return state.usersPage.followingInProgress\r\n};\r\n\r\nexport const countSomethingDifficult = (state: AppStateType) => {\r\n    let count = 23;\r\n    return count;\r\n};","import React from 'react';\r\nimport {connect, DefaultRootState} from 'react-redux';\r\nimport {\r\n    follow,\r\n    setCurrentPage,\r\n    unfollow, toggleFollowingProgress, requestUsers\r\n} from '../../redux/users-reducer';\r\nimport Users from './Users';\r\nimport Preloader from \"../common/Preloader/Preloader\";\r\nimport {compose} from \"redux\";\r\nimport {\r\n    getCurrentPage,\r\n    getFollowingInProgress,\r\n    getIsFetching,\r\n    getPageSize,\r\n    getTotalUsersCount, getUsers,\r\n} from \"../../redux/users-selectors\";\r\nimport {UserType} from \"../../types/types\";\r\nimport {AppStateType} from \"../../redux/redux-store\";\r\n\r\ntype MapStatePropsType = {\r\n    currentPage: number\r\n    pageSize: number\r\n    isFetching: boolean\r\n    totalUsersCount: number\r\n    users: Array<UserType>\r\n    followingInProgress: Array<number>\r\n}\r\n\r\ntype MapDispatchPropsType = {\r\n    getUsers: (currentPage: number, pageSize: number) => void\r\n    unfollow: (userId: number) => void\r\n    follow: (userId: number) => void\r\n}\r\n\r\ntype OwnPropsType = {\r\n    pageTitle: string\r\n}\r\n\r\ntype PropsType = MapStatePropsType & MapDispatchPropsType & OwnPropsType\r\n\r\nclass UsersContainer extends React.Component<PropsType> {\r\n    componentDidMount() {\r\n        const {currentPage, pageSize} = this.props;\r\n        this.props.getUsers(currentPage, pageSize);\r\n    }\r\n\r\n    onPageChanged = (pageNumber: number) => {\r\n        const {pageSize} = this.props;\r\n        this.props.getUsers(pageNumber, pageSize);\r\n    };\r\n\r\n    render() {\r\n        return <>\r\n            <h2>{this.props.pageTitle}</h2>\r\n            {this.props.isFetching ? <Preloader/> : null}\r\n            <Users totalUsersCount={this.props.totalUsersCount}\r\n                   pageSize={this.props.pageSize}\r\n                   currentPage={this.props.currentPage}\r\n                   onPageChanged={this.onPageChanged}\r\n                   users={this.props.users}\r\n                   follow={this.props.follow}\r\n                   unfollow={this.props.unfollow}\r\n                   followingInProgress={this.props.followingInProgress}\r\n            />\r\n        </>\r\n    };\r\n}\r\n\r\nlet mapStateToProps = (state: AppStateType): MapStatePropsType=> {\r\n    return {\r\n        users: getUsers(state),\r\n        pageSize: getPageSize(state),\r\n        totalUsersCount: getTotalUsersCount(state),\r\n        currentPage: getCurrentPage(state),\r\n        isFetching: getIsFetching(state),\r\n        followingInProgress: getFollowingInProgress(state)\r\n    }\r\n};\r\nexport default compose(\r\n    // TStateProps = {}, TDispatchProps = {}, TOwnProps = {}, State = DefaultRootState\r\n    connect<MapStatePropsType, MapDispatchPropsType, OwnPropsType, AppStateType>(\r\n        mapStateToProps,\r\n        {follow, unfollow, getUsers: requestUsers})\r\n)(UsersContainer)","import React from 'react';\r\nimport s from './Header.module.css'\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\n\r\nconst Header = (props) => {\r\n    return <header className={s.header}>\r\n        <img src='https://mir-s3-cdn-cf.behance.net/projects/max_808/96faca82769309.Y3JvcCwxNzQ5LDEzNjgsMjk4LDA.png'/>\r\n        <div className={s.loginBlock}>\r\n            {props.isAuth\r\n                ? <div>{props.login} - <button onClick={props.logout}>Log out</button></div>\r\n                : <NavLink to={'/login'}>Login</NavLink>}\r\n\r\n        </div>\r\n    </header>\r\n};\r\n\r\nexport default Header;","import {authAPI, ResultCodeEnum, ResultCodeForCapctha, securityAPI} from \"../api/api\";\r\nimport { stopSubmit } from \"redux-form\";\r\n\r\nconst SET_USER_DATA = 'samurai-network/auth/SET_USER_DATA';\r\nconst GET_CAPTCHA_URL_SUCCESS = 'samurai-network/auth/GET_CAPTCHA_URL_SUCCESS';\r\n\r\nlet initialState = {\r\n    userId: null as (number | null),\r\n    email: null as string | null,\r\n    login: null as string | null,\r\n    isAuth: false,\r\n    captchaUrl: null as string | null// if null, then captcha is not required\r\n};\r\n\r\nexport type InitialStateType = typeof initialState;\r\n\r\nconst authReducer = (state = initialState, action: any): InitialStateType => {\r\n    switch (action.type) {\r\n        case SET_USER_DATA:\r\n        case GET_CAPTCHA_URL_SUCCESS:\r\n            return {\r\n                ...state,\r\n                ...action.payload\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\ntype SetAuthUserDataActionPayloadType = {\r\n    userId: number | null,\r\n    email: string | null,\r\n    login: string | null,\r\n    isAuth: boolean\r\n}\r\ntype SetAuthUserDataActionType = {\r\n    type: typeof SET_USER_DATA,\r\n    payload: SetAuthUserDataActionPayloadType\r\n}\r\n\r\nexport const setAuthUserData = (userId: number | null, email: string | null, login: string | null, isAuth: boolean): SetAuthUserDataActionType => ({\r\n    type: SET_USER_DATA, payload:\r\n        {userId, email, login, isAuth}\r\n});\r\n\r\ntype GetCaptchaUrlSuccessActionType = {\r\n    type: typeof GET_CAPTCHA_URL_SUCCESS\r\n    payload: { captchaUrl: string }\r\n}\r\n\r\nexport const getCaptchaUrlSuccess = (captchaUrl: string): GetCaptchaUrlSuccessActionType => ({\r\n    type: GET_CAPTCHA_URL_SUCCESS, payload: {captchaUrl}\r\n});\r\n\r\nexport const getAuthUserData = () => async (dispatch: any) => {\r\n    let meData = await authAPI.me();\r\n\r\n    if (meData.resultCode === ResultCodeEnum.Success) {\r\n        let {id, login, email} = meData.data;\r\n        dispatch(setAuthUserData(id, email, login, true));\r\n    }\r\n}\r\n\r\nexport const login = (email: string, password: string, rememberMe: boolean, captcha: string) => async (dispatch: any) => {\r\n    let data = await authAPI.login(email, password, rememberMe, captcha);\r\n    if (data.resultCode === ResultCodeEnum.Success) {\r\n        dispatch(getAuthUserData())\r\n    } else {\r\n        if (data.resultCode === ResultCodeForCapctha.CaptchaIsRequired) {\r\n            dispatch(getCaptchaUrl());\r\n        }\r\n\r\n        let message = data.messages.length > 0 ? data.messages[0] : \"Some error\";\r\n        dispatch(stopSubmit(\"login\", {_error: message}));\r\n    }\r\n}\r\n\r\nexport const getCaptchaUrl = () => async (dispatch: any) => {\r\n    const response = await securityAPI.getCaptchaUrl();\r\n    const captchaUrl = response.data.url;\r\n    dispatch(getCaptchaUrlSuccess(captchaUrl));\r\n}\r\n\r\n\r\n\r\nexport const logout = () => async (dispatch: any) => {\r\n    let response = await authAPI.logout();\r\n\r\n    if (response.data.resultCode === 0) {\r\n        dispatch(setAuthUserData(null, null, null, false));\r\n    }\r\n}\r\n\r\nexport default authReducer;","import React from 'react';\r\nimport Header from \"./Header\";\r\nimport {connect} from \"react-redux\";\r\nimport {logout} from \"../../redux/auth-reducer\";\r\n\r\nclass HeaderContainer extends React.Component {\r\n\r\n    render() {\r\n        return <Header {...this.props}/>\r\n    };\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n    isAuth: state.auth.isAuth,\r\n    login: state.auth.login,\r\n\r\n});\r\nexport default connect(mapStateToProps, {logout})(HeaderContainer);","import React from 'react';\r\nimport {Field, reduxForm} from \"redux-form\";\r\nimport {createField, Input} from \"../common/FormsControls/FormsControls\";\r\nimport {required} from \"../../utils/validators/validators\";\r\nimport {connect} from \"react-redux\";\r\nimport {login} from \"../../redux/auth-reducer\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport style from \"./../common/FormsControls/FormsControls.module.css\"\r\n\r\nconst LoginForm = ({handleSubmit, error, captchaUrl}) => {\r\n    return (\r\n\r\n        <form onSubmit={handleSubmit}>\r\n\r\n            {createField('Email', 'email', [required], Input)}\r\n            {createField('Password', 'password', [required], Input, {type: 'password'})}\r\n            {createField(null, 'rememberMe', [], Input, {type: 'checkbox'}, 'remember me')}\r\n            {captchaUrl && <img src={captchaUrl}/>}\r\n            {captchaUrl && createField(\"Symbols from image\", \"captcha\", [required], Input, {})}\r\n            {error && <div className={style.formSummaryError}>\r\n                {error}\r\n            </div>\r\n            }\r\n            <div>\r\n                <button>Login</button>\r\n            </div>\r\n        </form>\r\n    )\r\n};\r\n\r\nconst LoginReduxForm = reduxForm({form: 'login'})(LoginForm);\r\n\r\nconst Login = (props) => {\r\n    const onSubmit = (formData) => {\r\n        props.login(formData.email, formData.password, formData.rememberMe, formData.captcha);\r\n\r\n    };\r\n    if (props.isAuth) {\r\n        return <Redirect to={'/profile'}/>\r\n    }\r\n\r\n    return <div>\r\n        <h1>Login</h1>\r\n        <LoginReduxForm onSubmit={onSubmit} captchaUrl={props.captchaUrl}/>\r\n    </div>\r\n};\r\n\r\nconst mapStateToProps = (state) => ({\r\n    captchaUrl: state.auth.captchaUrl,\r\n    isAuth: state.auth.isAuth\r\n});\r\nexport default connect(mapStateToProps, {login})(Login);","import {getAuthUserData} from \"./auth-reducer\";\r\n\r\nconst INITIALIZED_SUCCESS = 'INITIALIZED_SUCCESS';\r\n\r\nexport type InitialStateType = {\r\n    initialized: boolean\r\n}\r\n\r\nlet initialState: InitialStateType = {\r\n    initialized: false,\r\n};\r\n\r\nconst appReducer = (state = initialState, action: any): InitialStateType => {\r\n    switch (action.type) {\r\n        case INITIALIZED_SUCCESS:\r\n            return {\r\n                ...state,\r\n                initialized: true\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\ntype InitializedSuccessActionType = {\r\n    type: typeof INITIALIZED_SUCCESS\r\n}\r\n\r\nexport const initializedSuccess = (): InitializedSuccessActionType => ({type: INITIALIZED_SUCCESS});\r\n\r\nexport const initializeApp = () => (dispatch: any) => {\r\n    let promise =  dispatch(getAuthUserData());\r\n    Promise.all([promise])\r\n        .then(() => {\r\n            dispatch(initializedSuccess());\r\n        });\r\n};\r\n\r\nexport default appReducer;","let initialState = {}\r\ntype InitialStateType = typeof initialState\r\nconst sidebarReducer = (state = initialState, action: any) => {\r\n    return state;\r\n}\r\n\r\nexport default sidebarReducer;","import {applyMiddleware, combineReducers, compose, createStore} from \"redux\";\r\nimport profileReducer from \"./profile-reducer\";\r\nimport dialogsReducer from \"./dialogs-reducer\";\r\nimport sidebarReducer from \"./sidebar-reducer\";\r\nimport usersReducer from \"./users-reducer\";\r\nimport authReducer from \"./auth-reducer\";\r\nimport thunkMiddleware from 'redux-thunk';\r\nimport {reducer as formReducer} from 'redux-form';\r\nimport appReducer from \"./app-reducer\";\r\n\r\nlet rootReducer = combineReducers({\r\n    profilePage: profileReducer,\r\n    dialogsPage: dialogsReducer,\r\n    sidebar: sidebarReducer,\r\n    usersPage: usersReducer,\r\n    auth: authReducer,\r\n    form: formReducer,\r\n    app: appReducer\r\n})\r\n\r\ntype RootReducerType = typeof rootReducer;\r\nexport type AppStateType = ReturnType<RootReducerType>\r\n\r\n// @ts-ignore\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose\r\n\r\nconst store = createStore(rootReducer,  composeEnhancers(applyMiddleware(thunkMiddleware)))\r\n// @ts-ignore\r\nwindow.__store__ = store\r\n\r\nexport default store","import React from \"react\";\r\nimport Preloader from \"../components/common/Preloader/Preloader\";\r\n\r\nexport const withSuspense = (Component) => {\r\n    return (props) => {\r\n        return <React.Suspense fallback={<Preloader/>}>\r\n            <Component {...props}/>\r\n        </React.Suspense>\r\n    }\r\n};","import React from 'react';\r\nimport './App.css';\r\nimport Navbar from \"./components/Navbar/Navbar\";\r\nimport {BrowserRouter, Redirect, Route, Switch, withRouter} from \"react-router-dom\";\r\nimport UsersContainer from \"./components/Users/UsersContainer\";\r\nimport HeaderContainer from \"./components/Header/HeaderContainer\";\r\nimport LoginPage from \"./components/Login/Login\";\r\nimport {connect, Provider} from \"react-redux\";\r\nimport {compose} from \"redux\";\r\nimport {initializeApp} from \"./redux/app-reducer\";\r\nimport Preloader from \"./components/common/Preloader/Preloader\";\r\nimport store from \"./redux/redux-store\";\r\nimport {withSuspense} from \"./hoc/withSuspense\";\r\n\r\nconst DialogsContainer = React.lazy(() => import('./components/Dialogs/DialogsContainer'));\r\nconst ProfileContainer = React.lazy(() => import('./components/Profile/ProfileContainer'));\r\n\r\nclass App extends React.Component {\r\n    catchAllUnhandledErrors = (reason, promise) => {\r\n        alert(\"Some error occured\");\r\n    };\r\n\r\n    componentDidMount() {\r\n        this.props.initializeApp();\r\n        window.addEventListener(\"unhandledrejection\", this.catchAllUnhandledErrors);\r\n    }\r\n    componentWillUnmount() {\r\n        window.removeEventListener(\"unhandledrejection\", this.catchAllUnhandledErrors);\r\n    }\r\n\r\n    render() {\r\n        if (!this.props.initialized) {\r\n            return <Preloader/>\r\n        }\r\n        return (\r\n            <div className='app-wrapper'>\r\n                <HeaderContainer/>\r\n                <Navbar/>\r\n                <div className='app-wrapper-content'>\r\n                    <Switch>\r\n                        <Route exact path='/'\r\n                               render={() => <Redirect to={\"/profile\"}/>}/>\r\n                        <Route path='/dialogs'\r\n                               render={withSuspense(DialogsContainer)}/>\r\n                        <Route path='/profile/:userId?'\r\n                               render={withSuspense(ProfileContainer)}/>\r\n                        <Route path='/users'\r\n                               render={() => <UsersContainer pageTitle={'Айтишник'}/>}/>\r\n                        <Route path='/login'\r\n                               render={() => <LoginPage/>}/>\r\n                        <Route path='*'\r\n                               render={() => <div>404 NOT FOUND</div>}/>\r\n                    </Switch>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n    initialized: state.app.initialized\r\n});\r\nlet AppContainer = compose(\r\n    withRouter,\r\n    connect(mapStateToProps, {initializeApp}))(App);\r\n\r\nconst SocialJSApp = (props) => {\r\n    return <BrowserRouter>\r\n        <Provider store={store}>\r\n            <AppContainer/>\r\n        </Provider>\r\n    </BrowserRouter>\r\n};\r\n\r\nexport default SocialJSApp;","import * as serviceWorker from './serviceWorker';\r\nimport React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport SocialJSApp from \"./App\";\r\n\r\nReactDOM.render(<SocialJSApp/>, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","import React from 'react';\r\nimport preloader from '../../../assets/images/Spinner.svg';\r\n\r\nlet Preloader = (props) => {\r\n    return <div  style={ {backgroundColor: 'white'} }>\r\n        <img src={preloader} />\r\n    </div>\r\n};\r\n\r\nexport default Preloader;","// extracted by mini-css-extract-plugin\nmodule.exports = {\"paginator\":\"Paginator_paginator__LIlIl\",\"pageNumber\":\"Paginator_pageNumber__l-XII\",\"selectedPage\":\"Paginator_selectedPage__3l3AP\",\"btn\":\"Paginator_btn__1v5fn\"};","export const required = value => {\r\n    if (value) return undefined;\r\n\r\n    return \"Field is required\";\r\n};\r\n\r\nexport const maxLengthCreator = (maxLength) => (value) => {\r\n    if (value.length > maxLength) return `Max length is ${maxLength} symbols`;\r\n    return undefined;\r\n};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"FormsControls_formControl__2pu-1\",\"error\":\"FormsControls_error__3pdM5\",\"formSummaryError\":\"FormsControls_formSummaryError__QKCp1\"};","import axios, {AxiosResponse} from \"axios\";\r\nimport {ProfileType} from \"../types/types\";\r\n\r\nconst instance = axios.create({\r\n    withCredentials: true,\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.0/',\r\n    headers: {\r\n        'API-KEY': '279228c3-424a-4fec-9955-c1d11ad9779f'\r\n    }\r\n});\r\n\r\nexport const usersAPI = {\r\n    getUsers(currentPage = 1, pageSize = 10) {\r\n        return instance.get(`users?page=${currentPage}&count=${pageSize}`)\r\n            .then(response => {\r\n                return response.data;\r\n            });\r\n    },\r\n    follow(userId: number) {\r\n        return instance.post(`follow/${userId}`)\r\n    },\r\n    unfollow(userId: number) {\r\n        return instance.delete(`follow/${userId}`)\r\n    },\r\n    getProfile(userId: number) {\r\n        console.warn('Obsolete method');\r\n        return profileAPI.getProfile(userId);\r\n    },\r\n};\r\n\r\nexport const profileAPI = {\r\n    getProfile(userId: number) {\r\n        return instance.get(`profile/` + userId);\r\n\r\n    },\r\n    getStatus(userId: number) {\r\n        return instance.get(`profile/status/` + userId);\r\n    },\r\n    updateStatus(status: string) {\r\n        return instance.put(`profile/status`, {status: status});\r\n    },\r\n    savePhoto(photoFile: any) {\r\n        const formData = new FormData();\r\n        formData.append(\"image\", photoFile);\r\n\r\n        return instance.put(`profile/photo`, formData, {\r\n            headers: {\r\n                'Content-Type': 'multipart/form-data'\r\n            }\r\n        });\r\n    },\r\n    saveProfile(profile: ProfileType) {\r\n        return instance.put(`profile`, profile);\r\n    }\r\n};\r\n\r\nexport enum ResultCodeEnum {\r\nSuccess = 0,\r\n    Error = 1\r\n}\r\nexport enum ResultCodeForCapctha {\r\n    CaptchaIsRequired = 10\r\n}\r\n\r\ntype MeResponseType = {\r\n    data: {\r\n        id: number\r\n        email: string\r\n        login: string\r\n    }\r\n    resultCode: ResultCodeEnum\r\n    messages: Array<string>\r\n}\r\n\r\ntype LoginResponseType = {\r\n    data: {\r\n        userId: number\r\n    }\r\n    resultCode: ResultCodeEnum | ResultCodeForCapctha\r\n    messages: Array<string>\r\n}\r\n\r\nexport const authAPI = {\r\n    me() {\r\n        return instance.get<MeResponseType>(`auth/me`).then(res => res.data)\r\n    },\r\n    login(email: string, password: string, rememberMe = false, captcha: null | string = null) {\r\n        return instance.post<LoginResponseType>(`auth/login`, {email, password, rememberMe, captcha})\r\n            .then(res =>res.data);\r\n    },\r\n    logout() {\r\n        return instance.delete(`auth/login`);\r\n    },\r\n};\r\n\r\nexport const securityAPI = {\r\n    getCaptchaUrl() {\r\n        return instance.get(`security/get-captcha-url`)\r\n    },\r\n};\r\n\r\n//authAPI.me().then((res: AxiosResponse<any>) => res.data)","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__2J3UO\",\"loginBlock\":\"Header_loginBlock__37i9_\"};","import {profileAPI, usersAPI} from \"../api/api\";\r\nimport {stopSubmit} from \"redux-form\";\r\nimport {PhotosType, PostType, ProfileType} from '../types/types';\r\n\r\nconst ADD_POST = 'ADD-POST';\r\nconst SET_USER_PROFILE = 'SET_USER_PROFILE';\r\nconst SET_STATUS = 'SET_STATUS';\r\nconst DELETE_POST = 'DELETE_POST';\r\nconst SAVE_PHOTO_SUCCESS = 'SAVE_PHOTO_SUCCESS';\r\n\r\nlet initialState = {\r\n    posts: [\r\n        {id: 1, message: 'Hi, how are you?', likesCount: 12},\r\n        {id: 2, message: 'It\\'s my first post', likesCount: 11},\r\n        {id: 3, message: 'Blabla', likesCount: 11},\r\n        {id: 4, message: 'Dada', likesCount: 11}\r\n    ] as Array<PostType>,\r\n    profile: null as ProfileType | null,\r\n    status: '',\r\n    newPostText: ''\r\n};\r\nexport type InitialStateType = typeof initialState;\r\n\r\nconst profileReducer = (state = initialState, action: any): InitialStateType => {\r\n\r\n    switch (action.type) {\r\n        case ADD_POST: {\r\n            let newPost = {\r\n                id: 5,\r\n                message: action.newPostText,\r\n                likesCount: 0\r\n            };\r\n            return {\r\n                ...state,\r\n                posts: [...state.posts, newPost],\r\n                newPostText: ''\r\n            };\r\n        }\r\n        case SET_STATUS: {\r\n            return {\r\n                ...state,\r\n                status: action.status\r\n            }\r\n        }\r\n        case SET_USER_PROFILE: {\r\n            return {...state, profile: action.profile}\r\n        }\r\n\r\n        case DELETE_POST:\r\n            return {...state, posts: state.posts.filter(p => p.id != action.postId)}\r\n\r\n        case SAVE_PHOTO_SUCCESS:\r\n            return {...state, profile: {...state.profile, photos: action.photos} as ProfileType}\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\n\r\ntype AddPostActionCreatorActionType = {\r\n    type: typeof ADD_POST\r\n    newPostText: string\r\n}\r\nexport const addPostActionCreator = (newPostText: string): AddPostActionCreatorActionType => ({type: ADD_POST, newPostText})\r\ntype SetUserProfileActionType = {\r\n    type: typeof SET_USER_PROFILE\r\n    profile: ProfileType\r\n}\r\nexport const setUserProfile = (profile: ProfileType): SetUserProfileActionType => ({type: SET_USER_PROFILE, profile})\r\ntype SetStatusActionType = {\r\n    type: typeof SET_STATUS\r\n    status: string\r\n}\r\nexport const setStatus = (status: string): SetStatusActionType => ({type: SET_STATUS, status})\r\ntype DeletePostActionType = {\r\n    type: typeof DELETE_POST\r\n    postId: number\r\n}\r\nexport const deletePost = (postId: number): DeletePostActionType => ({type: DELETE_POST, postId})\r\ntype SavePhotoSuccessActionType = {\r\n    type: typeof SAVE_PHOTO_SUCCESS\r\n    photos: PhotosType\r\n}\r\nexport const savePhotoSuccess = (photos: PhotosType) => ({type: SAVE_PHOTO_SUCCESS, photos})\r\n\r\nexport const getUserProfile = (userId: number) => async (dispatch: any) => {\r\n    const response = await usersAPI.getProfile(userId);\r\n    dispatch(setUserProfile(response.data));\r\n}\r\n\r\nexport const getStatus = (userId: number) => async (dispatch: any) => {\r\n    let response = await profileAPI.getStatus(userId);\r\n    dispatch(setStatus(response.data));\r\n}\r\n\r\nexport const updateStatus = (status: string) => async (dispatch: any) => {\r\n    try {\r\n        let response = await profileAPI.updateStatus(status);\r\n\r\n        if (response.data.resultCode === 0) {\r\n            dispatch(setStatus(status));\r\n        }\r\n    } catch(error) {\r\n        //\r\n    }\r\n}\r\nexport const savePhoto = (file: any) => async (dispatch: any) => {\r\n    let response = await profileAPI.savePhoto(file);\r\n\r\n    if (response.data.resultCode === 0) {\r\n        dispatch(savePhotoSuccess(response.data.data.photos));\r\n    }\r\n}\r\nexport const saveProfile = (profile: ProfileType) => async (dispatch: any, getState: any) => {\r\n    const userId = getState().auth.userId;\r\n    const response = await profileAPI.saveProfile(profile);\r\n\r\n    if (response.data.resultCode === 0) {\r\n        dispatch(getUserProfile(userId));\r\n    } else {\r\n        dispatch(stopSubmit(\"edit-profile\", {_error: response.data.messages[0] }));\r\n        return Promise.reject(response.data.messages[0]);\r\n    }\r\n}\r\n\r\nexport default profileReducer;"],"sourceRoot":""}